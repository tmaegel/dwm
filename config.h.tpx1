/* See LICENSE file for copyright and license details. */

#include <X11/XF86keysym.h>

/* appearance */
static const unsigned int borderpx  = 5;        /* border pixel of windows */
static const unsigned int snap      = 32;       /* snap pixel */
static const int showbar            = 1;        /* 0 means no bar */
static const int topbar             = 1;        /* 0 means bottom bar */
static const int extrabar           = 0;        /* 0 means no extra bar */
static const char *fonts[]          = { "Siji:size=9",
                                        "Dina:size=9" };
static const char normbordercolor[] = "#333333";
static const char normbgcolor[]     = "#0d131a";
static const char normfgcolor[]     = "#8b9499";
static const char selbordercolor[]  = "#4b555e";
static const char selbgcolor[]      = "#0d131a";
static const char selfgcolor[]      = "#FFFFFF";
static const char *colors[][3]      = {
	/*               fg         bg         border   */
	[SchemeNorm] = { normfgcolor, normbgcolor, normbordercolor },
	[SchemeSel]  = { selfgcolor, selbgcolor, selbordercolor },
};

/* patch: tilegap */
static const unsigned int gappx     = 20;       /* gap pixel between windows */
/* patch: bargapp */
static const unsigned int bargapp   = 16;       /* padding bar */

/* tagging */
static const char *tags[] = { "\uE0BF", "\uE1EC", "\uE276", "\uE1D9", "\uE04D", "\uE0AD", "\uE073", "\uE0FF" };

static const Rule rules[] = {
	/* xprop(1):
	 *	WM_CLASS(STRING) = instance, class
	 *	WM_NAME(STRING) = title
	 */
	/* class      instance    title       tags mask     iscentered     isfloating   monitor */
	{ "Firefox",    NULL,       NULL,      1 << 0,       0,            0,          -1 },
	{ "Thunderbird",NULL,       NULL,      1 << 6,       0,            0,          -1 },
	{ "libreoffice",NULL,       NULL,      1 << 3,       0,            0,          -1 },
	{ "Gimp"      , NULL,       NULL,      0,            0,  	       0,  	       -1 },
	{ "Galculator", NULL,       NULL,      0,            1,  	       1,  	       -1 },
	{ "Gpicview",   NULL,       NULL,      0,            1,  	       1,  	       -1 },
	{ "feh",        NULL,       NULL,      0,            1,  	       1,  	       -1 },
	{ "Surf",       NULL,       NULL,      1 << 7,       0,            0,          -1 },
	{ "Pidgin",     NULL,       NULL,      0,            1,  	       1,  	       -1 },
};

/* layout(s) */
static const float mfact     = 0.55; /* factor of master area size [0.05..0.95] */
static const int nmaster     = 1;    /* number of clients in master area */
static const int resizehints = 1;    /* 1 means respect size hints in tiled resizals */

static const Layout layouts[] = {
	/* symbol     arrange function */
	{ " \uE257", tile }, 		/* first entry is default */
	{ " \uE135", NULL }, 		/* no layout function means floating behavior */
	{ " \uE13a", monocle },
};

/* key definitions */
#define MODKEY Mod4Mask
#define ALTKEY Mod1Mask
#define TAGKEYS(KEY,TAG) \
	{ MODKEY,                       KEY,      view,           {.ui = 1 << TAG} }, \
	{ MODKEY|ShiftMask,             KEY,      toggleview,     {.ui = 1 << TAG} }, \
	{ MODKEY|ControlMask,           KEY,      tag,            {.ui = 1 << TAG} }, \
	{ MODKEY|ControlMask|ShiftMask, KEY,      toggletag,      {.ui = 1 << TAG} },

/* helper for spawning shell commands in the pre dwm-5.0 fashion */
#define SHCMD(cmd) { .v = (const char*[]){ "/bin/sh", "-c", cmd, NULL } }

/* commands */
static char dmenumon[2] = "0"; /* component of dmenucmd, manipulated in spawn() */
static const char *dmenucmd[]       = { "dmenu_run", "-m", dmenumon, NULL };
static const char *lockcmd[]        = { "slock", NULL };
static const char *termcmd[]        = { "st", NULL };
static const char *firefox[]        = { "firefox", NULL };
static const char *filemanagercmd[] = { "thunar", NULL };
static const char *calculatorcmd[]  = { "galculator", NULL };
static const char *lightdown[]      = { "/usr/local/bin/changebrightness", "dec", NULL };
static const char *lightup[]        = { "/usr/local/bin/changebrightness", "inc", NULL };
static const char *volumedown[]     = { "/usr/local/bin/changevolume", "dec", NULL };
static const char *volumeup[]       = { "/usr/local/bin/changevolume", "inc", NULL };
static const char *volumetoggle[]   = { "/usr/local/bin/changevolume", "toggle", NULL };

static Key keys[] = {
	/* modifier                     key        function        argument */
	{ MODKEY,                       XK_F1,     spawn,          {.v = volumetoggle } },
	{ MODKEY,                       XK_F2,     spawn,          {.v = volumedown } },
	{ MODKEY,                       XK_F3,     spawn,          {.v = volumeup } },
	{ MODKEY,                       XK_F5,     spawn,          {.v = lightdown } },
	{ MODKEY,                       XK_F6,     spawn,          {.v = lightup } },
	{ MODKEY,                       XK_d,      spawn,          {.v = dmenucmd } },
	{ MODKEY,                       XK_Return, spawn,          {.v = termcmd } },
	{ MODKEY,                       XK_b,      spawn,          {.v = firefox } },
	{ MODKEY,                       XK_n,      spawn,          {.v = filemanagercmd } },
	{ MODKEY,                       XK_c,      spawn,          {.v = calculatorcmd } },
	{ MODKEY|ShiftMask,             XK_l,      spawn,          {.v = lockcmd } },
	{ MODKEY|ShiftMask,             XK_b,      togglebar,      {0} },
	{ MODKEY|ShiftMask,             XK_b,      toggleextrabar, {0} },                   // patch: dualstatus
	{ MODKEY,                       XK_Down,   focusstack,     {.i = +1 } },            // focus next window
	{ MODKEY,                       XK_Up,     focusstack,     {.i = -1 } },            // focus previous window
	{ MODKEY,                       XK_plus,   incnmaster,     {.i = +1 } },            // increase number of windows in master stack
	{ MODKEY,                       XK_minus,  incnmaster,     {.i = -1 } },            // decrease number of windows in master stack
	{ MODKEY,                       XK_Left,   setmfact,       {.f = -0.05} },          // increase width
	{ MODKEY,                       XK_Right,  setmfact,       {.f = +0.05} },          // decrease width
	{ MODKEY|ShiftMask,             XK_Return, zoom,           {0} },                   // switch master to slave and back
	{ MODKEY,                       XK_Tab,    view,           {0} },                   // switch previous tag and back
	{ MODKEY|ShiftMask,             XK_q,      killclient,     {0} },
	{ MODKEY,                       XK_t,      setlayout,      {.v = &layouts[0]} },
	{ MODKEY,                       XK_f,      setlayout,      {.v = &layouts[1]} },
	{ MODKEY,                       XK_m,      setlayout,      {.v = &layouts[2]} },
	{ MODKEY,                       XK_space,  setlayout,      {0} },                   // switch previous layout and back
	{ MODKEY|ShiftMask,             XK_space,  togglefloating, {0} },
	{ MODKEY,                       XK_0,      view,           {.ui = ~0 } },           // show all windows
    { MODKEY|ControlMask|ShiftMask, XK_0,      tag,            {.ui = ~0 } },           // show focused window on all tags
    { ALTKEY,                       XK_Left,   focusmon,       {.i = -1 } },            // focus previous monitor
	{ ALTKEY,                       XK_Right,  focusmon,       {.i = +1 } },            // focus next monitor
	{ ALTKEY|ShiftMask,             XK_Left,   tagmon,         {.i = -1 } },            // move focused window to previous monitor
	{ ALTKEY|ShiftMask,             XK_Right,  tagmon,         {.i = +1 } },            // move focused window to next monitor
	TAGKEYS(                        XK_1,                      0)
	TAGKEYS(                        XK_2,                      1)
	TAGKEYS(                        XK_3,                      2)
	TAGKEYS(                        XK_4,                      3)
	TAGKEYS(                        XK_5,                      4)
	TAGKEYS(                        XK_6,                      5)
	TAGKEYS(                        XK_7,                      6)
	TAGKEYS(                        XK_8,                      7)
	TAGKEYS(                        XK_9,                      8)	
	{ ALTKEY|ControlMask,           XK_Left,   viewtoleft,     {0} },                   // patch: focusadjacenttag, focus tag to the left
	{ ALTKEY|ControlMask,           XK_Right,  viewtoright,    {0} },                   // patch: focusadjacenttag, focus tag to the right
	{ MODKEY|ControlMask,           XK_Left,   tagtoleft,      {0} },                   // patch: focusadjacenttag, move focused window to tag to the left
	{ MODKEY|ControlMask,           XK_Right,  tagtoright,     {0} },                   // patch: focusadjacenttag, move focused window to tag to the right
	{ MODKEY|ControlMask,           XK_Up,     pushup,         {0} },                   // patch: push, move window in slave area up
	{ MODKEY|ControlMask,           XK_Down,   pushdown,       {0} },                   // patch: push, move window in slave area down
	{ MODKEY|ShiftMask,             XK_e,      quit,           {0} },                   // quit dwm cleanly or kill -HUP dwmpid
	{ MODKEY|ShiftMask,             XK_r,      quit,           {1} },                   // patch: restartsig, restart dwm or kill -TERM dwmpid
};

/* button definitions */
/* click can be ClkTagBar, ClkLtSymbol, ClkStatusText, ClkWinTitle, ClkClientWin, or ClkRootWin */
static Button buttons[] = {
	/* click                event mask      button          function        argument */
	{ ClkLtSymbol,          0,              Button1,        setlayout,      {0} },
	{ ClkLtSymbol,          0,              Button3,        setlayout,      {.v = &layouts[2]} },
	{ ClkWinTitle,          0,              Button2,        zoom,           {0} },
	{ ClkStatusText,        0,              Button2,        spawn,          {.v = termcmd } },
	{ ClkClientWin,         MODKEY,         Button1,        movemouse,      {0} },
	{ ClkClientWin,         MODKEY,         Button2,        togglefloating, {0} },
	{ ClkClientWin,         MODKEY,         Button3,        resizemouse,    {0} },
	{ ClkTagBar,            0,              Button1,        view,           {0} },
	{ ClkTagBar,            0,              Button3,        toggleview,     {0} },
	{ ClkTagBar,            MODKEY,         Button1,        tag,            {0} },
	{ ClkTagBar,            MODKEY,         Button3,        toggletag,      {0} },
};

